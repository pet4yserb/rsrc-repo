#!/usr/bin/env bash
# This script was generated by bashly 1.0.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
	printf "bash version 4 or higher is required\n" >&2
	exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
	# src/root_command.sh
	#!/bin/bash
	# inspect_args

	APPS_DIR="${args[--location]}/splunk/etc/apps"
	args[target]="${args[target]%/}"
	eval "EXCLUSIONS=(${args[--exclude]})"

	root_check() {
		if [ $(id -u) != 0 ]; then
			red 'Script must be run as root'
			exit 1
		fi
	}

	print_err() {
		if [ ! -z "${args[--debug]}" ]; then
			echo "${1}"
		fi
	}

	install_splunk() {
		checkAnswer() {
			read -r -p "${1}" A
			if [ "$A" != "y" ] && [ "$A" != "n" ]; then
				checkAnswer "${1}"
			fi
		}

		extractSplunk() {
			echo -n "$(bold Extracting Splunk tar................)"
			if ! ERR=$(tar xmfz "${args[target]}/splunk-9.0.4.1-419ad9369127-Linux-x86_64.tgz" -C "${args[--location]}" 2>&1 > /dev/null); then
				red 'FAILED'
				print_err "${ERR}"
				exit 1
			fi

			green OK

		}

		if [ -f "${args[target]}/splunk-9.0.4.1-419ad9369127-Linux-x86_64.tgz" ]; then
			if [ -d "${args[--location]}/splunk" ]; then
				echo "A Splunk installation is already located at ${args[--location]}"
				checkAnswer 'Do you want to delete it first. The rest of the configuration will still occur (y/n) '
				if [ "$A" == y ]; then
					pkill -f 'splunkd|splunk/var'
					rm -fr "${args[--location]}/splunk"
					extractSplunk
				else
					red_bold 'Navigate to <IP>:8000/debug/refresh and click "Refresh" to finish configuration'
				fi
			else
				extractSplunk
			fi

			chown 0:0 "${args[--location]}/splunk"
		else
			red 'Splunk tar file not found. Exiting..'
			exit 1
		fi
	}

	install_addons() {
		echo
		if [[ ! "${EXCLUSIONS[*]}" =~ "addons" ]]; then
			bold 'Installing apps and addons'
			for i in "${ADDONS[@]}"; do
				echo -n "Installing ${i}................"
				if ERR=$(tar xfz "${args[target]}/${i}" -C "${APPS_DIR}/" 2>&1 > /dev/null); then
					green OK
				else
					red FAILED
					print_err "${ERR}"
				fi
			done

			echo
			echo -n "$(bold Configuring InfoSec App................)"
			if [ -d "${APPS_DIR}/InfoSec_App_for_Splunk" ] && [ -d "${APPS_DIR}/Splunk_SA_CIM" ]; then
				mkdir "${APPS_DIR}/Splunk_SA_CIM/local" 2>/dev/null
				cp "${APPS_DIR}/Splunk_SA_CIM/default/datamodels.conf" "${APPS_DIR}/Splunk_SA_CIM/local/"
				sed -i '/^\[Authentication\]\|\[Change\]\|\[Intrusion_Detection\]\|\[Malware\]\|\[Network_Sessions\]\|\[Network_Traffic\]\|\[Endpoint\]\|\[Web\]/{n; s/^\(acceleration\s*=\s*\)false/\1true/}' "${APPS_DIR}/Splunk_SA_CIM/local/datamodels.conf"
				green OK
			else
				red FAILED
				echo 'InfoSec_App_for_Splunk or Splunk_SA_CIM app not found'
			fi
		else
			yellow_bold 'Skipping addons'
		fi
	}

	install_deployment_apps() {
		echo
		if [[ ! "${EXCLUSIONS[*]}" =~ "deploy" ]]; then
			bold 'Installing deployment apps'
			for i in "${DEPLOY[@]}"; do
				echo -n "Installing ${i} "
				if ERR=$(tar xfz "${args[target]}/${i}" -C "${args[--location]}/splunk/etc/deployment-apps/" 2>&1 > /dev/null); then
					DEPLOY_APP_DIR="${args[--location]}/splunk/etc/deployment-apps/$(tar -tf "${args[target]}/${i}" | head -1 | cut -f1 -d'/')"
					mkdir "${DEPLOY_APP_DIR}/local" 2>/dev/null
					cp "${DEPLOY_APP_DIR}/default/inputs.conf" "${DEPLOY_APP_DIR}/local/"
					sed -i 's/disabled = true/disabled = false/g' "${DEPLOY_APP_DIR}/local/inputs.conf"
					sed -i 's/disabled = 1/disabled = 0/g' "${DEPLOY_APP_DIR}/local/inputs.conf"
					green OK
				else
					red FAILED
					print_err "${ERR}"
				fi
			done

			echo
			echo -n "$(bold Creating serverclass.conf................)"
			cat <<- EOF > "${args[--location]}/splunk/etc/system/local/serverclass.conf"
		[serverClass:linux-server-class]
		whitelist.0 = *
		[serverClass:linux-server-class:app:Splunk_TA_nix]
		restartSplunkd = true
		machineFilterTypes = linux*

		[serverClass:windows-server-class]
		whitelist.0 = *
		[serverClass:windows-server-class:app:Splunk_TA_windows]
		restartSplunkd = true
		machineFilterTypes = windows*
		EOF

			green OK
		else
			yellow_bold 'Skipping deployment apps'
		fi
	}

	create_creds() {
		echo
		bold 'Creating username and password'
		if [ -z "${args[--no-prompt]}" ]; then
			read -r -p 'Username (admin): ' USERNAME
			read -r -s -p 'Password (changeme): ' PASSWD
		fi

		if [ -z "${USERNAME}" ]; then
			USERNAME="admin"
		fi

		if [ -z "${PASSWD}" ]; then
			PASSWD="changeme"
		fi

		cat <<- EOF > "${args[--location]}/splunk/etc/system/local/user-seed.conf"
		[user_info]
		USERNAME = ${USERNAME}
		PASSWORD = ${PASSWD}
		EOF
	}

	install_dashboards() {
		echo
		if [[ ! "${EXCLUSIONS[*]}" =~ "dashboards" ]]; then
			bold 'Installing dashboards'
			mkdir -p "${args[--location]}/splunk/etc/users/${USERNAME}/search/local/data/ui/views"
			for i in "${args[target]}"/Imports/*.xml; do
				echo -n "Installing ${i}................"
				cp "${i}" "${args[--location]}/splunk/etc/users/${USERNAME}/search/local/data/ui/views/"
				if [ -f "${args[--location]}/splunk/etc/users/${USERNAME}/search/local/data/ui/views/$(basename "${i}")" ]; then
					green OK
				else
					red FAILED
				fi
			done
		else
			bold_yellow 'Skipping dashboards'
		fi
	}

	disable_thp() {
		echo
		if [[ ! "${EXCLUSIONS[*]}" =~ "thp" ]]; then
			echo -n "$(bold Disabling transparent huge pages................)"
			if [ -f "/sys/kernel/mm/transparent_hugepage/enabled" ]; then
				echo 'never' >> /sys/kernel/mm/transparent_hugepage/enabled
				green OK
			else
				red FAILED
				echo '/sys/kernel/mm/transparent_hugepage/enabled not found. Please do it manually:'
				echo "echo 'never' >> <transparent_hugepage_file>"
			fi
		else
			yellow_bold 'Skipping disabling transparent huge pages'
		fi
	}

	splunk_init() {
		# Enable Universal Forwarder port 9997
		"${args[--location]}/splunk/bin/splunk" enable listen 9997 --accept-license --no-prompt > /dev/null
		# Enable start at boot
		"${args[--location]}/splunk/bin/splunk" enable boot-start --accept-license --no-prompt
		if [ ! -f '/etc/init.d/splunk' ] && [ ! -f '/etc/systemd/system/Splunkd' ]; then
			red 'Failed to enable boot-start'
		fi

		# Start Splunk
		if [ -z "${args[--no-start]}" ]; then
			echo -n "$(bold Starting Splunk................)"
			if ! ERR=$("${args[--location]}/splunk/bin/splunk" start --accept-license --no-prompt 2>&1 > /dev/null); then
				red FAILED
				print_err "${ERR}"
			else
				green OK
			fi
		fi

	}

	root_check
	install_splunk
	install_addons
	install_deployment_apps
	create_creds
	install_dashboards
	disable_thp
	splunk_init

}

# :command.version_command
version_command() {
	echo "$version"
}

# :command.usage
splunk_setup_usage() {
	if [[ -n $long_usage ]]; then
		printf "splunk-setup - Initializes a standalone Splunk Enterprise instance\n"
		echo

	else
		printf "splunk-setup - Initializes a standalone Splunk Enterprise instance\n"
		echo

	fi

	printf "%s\n" "$(bold "Usage:")"
	printf "  splunk-setup [TARGET] [OPTIONS]\n"
	printf "  splunk-setup --help | -h\n"
	printf "  splunk-setup --version | -v\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "$(bold "Options:")"

		# :command.usage_flags
		# :flag.usage
		printf "  %s\n" "$(magenta "--exclude, -e EXCLUDE (repeatable)")"
		printf "    Exclude a portion of the installation\n"
		printf "    Allowed: addons, deploy, thp, dashboards\n"
		echo

		# :flag.usage
		printf "  %s\n" "$(magenta "--location, -L LOCATION")"
		printf "    Specify a custom location to install Splunk\n"
		printf "    Default: /opt\n"
		echo

		# :flag.usage
		printf "  %s\n" "$(magenta "--no-prompt")"
		printf "    Does not prompt for a password, use the default Splunk password instead\n"
		echo

		# :flag.usage
		printf "  %s\n" "$(magenta "--no-start")"
		printf "    Do not start the splunkd process\n"
		echo

		# :flag.usage
		printf "  %s\n" "$(magenta "--debug")"
		printf "    Enable debugging\n"
		echo

		# :command.usage_fixed_flags
		printf "  %s\n" "$(magenta "--help, -h")"
		printf "    Show this help\n"
		echo
		printf "  %s\n" "$(magenta "--version, -v")"
		printf "    Show version number\n"
		echo

		# :command.usage_args
		printf "%s\n" "$(bold "Arguments:")"

		# :argument.usage
		printf "  %s\n" "$(blue "TARGET")"
		printf "    Specify directory of resource-repo-splunk/Splunk/ to use\n"
		printf "    Default: .\n"
		echo

	fi
}

# :command.normalize_input
normalize_input() {
	local arg flags

	while [[ $# -gt 0 ]]; do
		arg="$1"
		if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
			flags="${BASH_REMATCH[1]}"
			for ((i = 0; i < ${#flags}; i++)); do
				input+=("-${flags:i:1}")
			done
		else
			input+=("$arg")
		fi

		shift
	done
}
# :command.inspect_args
inspect_args() {
	if ((${#args[@]})); then
		readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
		echo args:
		for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
	else
		echo args: none
	fi

	if ((${#other_args[@]})); then
		echo
		echo other_args:
		echo "- \${other_args[*]} = ${other_args[*]}"
		for i in "${!other_args[@]}"; do
			echo "- \${other_args[$i]} = ${other_args[$i]}"
		done
	fi

	if ((${#deps[@]})); then
		readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
		echo
		echo deps:
		for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
	fi

}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
	local color="$1"
	shift
	if [[ -z ${NO_COLOR+x} ]]; then
		printf "$color%b\e[0m\n" "$*"
	else
		printf "%b\n" "$*"
	fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/validations/validate_dir_exists.sh
validate_dir_exists() {
	[[ -d "$1" ]] || echo "must be an existing directory"
}

# src/lib/validations/validate_file_exists.sh
validate_file_exists() {
	[[ -f "$1" ]] || echo "must be an existing file"
}

# src/lib/validations/validate_integer.sh
validate_integer() {
	[[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

# src/lib/validations/validate_not_empty.sh
validate_not_empty() {
	[[ -z "$1" ]] && echo "must not be empty"
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--version | -v)
				version_command
				exit
				;;

			--help | -h)
				long_usage=yes
				splunk_setup_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.dependencies_filter
	if command -v tar >/dev/null 2>&1; then
		deps['tar']="$(command -v tar | head -n1)"
	else
		printf "missing dependency: tar\n" >&2
		printf "%s\n" "tar must be installed" >&2
		exit 1
	fi

	if command -v unzip >/dev/null 2>&1; then
		deps['unzip']="$(command -v unzip | head -n1)"
	else
		printf "missing dependency: unzip\n" >&2
		printf "%s\n" "unzip must be installed" >&2
		exit 1
	fi

	if command -v sed >/dev/null 2>&1; then
		deps['sed']="$(command -v sed | head -n1)"
	else
		printf "missing dependency: sed\n" >&2
		printf "%s\n" "sed must be installed" >&2
		exit 1
	fi

	if command -v pkill >/dev/null 2>&1; then
		deps['pkill']="$(command -v pkill | head -n1)"
	else
		printf "missing dependency: pkill\n" >&2
		printf "%s\n" "pkill must be installed" >&2
		exit 1
	fi

	if command -v basename >/dev/null 2>&1; then
		deps['basename']="$(command -v basename | head -n1)"
	else
		printf "missing dependency: basename\n" >&2
		printf "%s\n" "basename must be installed" >&2
		exit 1
	fi

	# :command.command_filter
	action="root"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
			# :flag.case
			--exclude | -e)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					if [[ -z ${args['--exclude']+x} ]]; then
						args['--exclude']="\"$2\""
					else
						args['--exclude']="${args[--exclude]} \"$2\""
					fi
					shift
					shift
				else
					printf "%s\n" "--exclude requires an argument: --exclude, -e EXCLUDE" >&2
					exit 1
				fi
				;;

			# :flag.case
			--location | -L)

				# :flag.case_arg
				if [[ -n ${2+x} ]]; then

					args['--location']="$2"
					shift
					shift
				else
					printf "%s\n" "--location requires an argument: --location, -L LOCATION" >&2
					exit 1
				fi
				;;

			# :flag.case
			--no-prompt)

				# :flag.case_no_arg
				args['--no-prompt']=1
				shift
				;;

			# :flag.case
			--no-start)

				# :flag.case_no_arg
				args['--no-start']=1
				shift
				;;

			# :flag.case
			--debug)

				# :flag.case_no_arg
				args['--debug']=1
				shift
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['target']+x} ]]; then
					# :argument.validations
					if [[ -n $(validate_dir_exists "$1") ]]; then
						printf "validation error in %s:\n%s\n" "TARGET" "$(validate_dir_exists "$1")" >&2
						exit 1
					fi

					args['target']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.default_assignments
	[[ -n ${args['target']:-} ]] || args['target']="."
	[[ -n ${args['--location']:-} ]] || args['--location']="/opt"

	# :command.whitelist_filter
	eval "input_array=(${args[--exclude]})"
	for i in "${input_array[@]}"; do
		if [[ ! $i =~ ^(addons|deploy|thp|dashboards)$ ]]; then
			printf "%s\n" "--exclude must be one of: addons, deploy, thp, dashboards" >&2
			exit 1
		fi
	done

}

# :command.initialize
initialize() {
	version="0.1.0"
	long_usage=''

	# src/initialize.sh
	ADDONS=(
		'Add-On/punchcard-custom-visualization_150.tgz'
		'Add-On/splunk-add-on-for-unix-and-linux_880.tgz'
		'Add-On/splunk-add-on-for-microsoft-windows_860.tgz'
		'Add-On/splunk-sankey-diagram-custom-visualization_160.tgz'
		'Add-On/splunk-add-on-for-apache-web-server_210.tgz'
		'Add-On/splunk-add-on-for-nginx_321.tgz'
		'Add-On/splunk-add-on-for-microsoft-iis_120.tgz'
		'Apps/force-directed-app-for-splunk_310.tgz'
		'Apps/infosec-app-for-splunk_170.tgz'
		'Apps/splunk-app-for-lookup-file-editing_360.tgz'
		'Apps/splunk-common-information-model-cim_510.tgz'
	)

	DEPLOY=(
		'Add-On/splunk-add-on-for-unix-and-linux_880.tgz'
		'Add-On/splunk-add-on-for-microsoft-windows_860.tgz'
	)
}

# :command.run
run() {
	declare -A args=()
	declare -A deps=()
	declare -a other_args=()
	declare -a input=()
	normalize_input "$@"
	parse_requirements "${input[@]}"

	case "$action" in
		"root") root_command ;;
	esac
}

initialize
run "$@"
