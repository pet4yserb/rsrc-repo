#!/usr/bin/env bash
# This script was generated by bashly 1.0.3 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
	printf "bash version 4 or higher is required\n" >&2
	exit 1
fi

root_command() {
	# inspect_args

	is_yes_or_no() {
		read -r -p "${1}" A
		if [ "$A" != "y" ] && [ "$A" != "n" ]; then
			checkAnswer "${1}"
		fi
	}

	root_check() {
		if [ $(id -u) != 0 ]; then
			red 'Script must be run as root'
			exit 1
		fi
	}

	verify_uf() {
		# Checks if source is a valid tar file and has a root directory of splunkforwarder
		RESULT="$(tar tf "${args[source]}")" || exit 1
		if ! RESULT="$(echo "${RESULT}" | head -1)" || \
			! RESULT="$(echo "${RESULT}" | cut -f1 -d '/')" || \
			[[ "${RESULT}" != 'splunkforwarder' ]]; then
			[[ -z "${args[--debug]}" ]] || magenta_bold "${RESULT} != splunkforwarder"
			echo "This doesn't look like a Splunk Universal Forwarder..."
			is_yes_or_no 'Do you want to try to continue anyway? (y/n) '
			[[ "${A}" == 'n' ]] && exit 1
		fi
	}

	get_ip() {
		A=''
		echo
		read -r -p 'Enter an IP to use for the Splunk Indexer: ' IP
		if ! [[ "${IP}" =~ ${IP_REGEX} ]]; then
			get_ip
		else
			echo -n 'Checking to see if host is up...'
			ping "${IP}" -c 1 -n -W 5 &> /dev/null
			if [[ $? != 0 ]]; then
				echo
				is_yes_or_no "The host doesn't seem to be up. Continue anyway? (y/n) "
			else
				green 'OK'
			[[ "${A}" == 'n' ]] && exit 0
			fi
		fi
	}

	extract_splunk() {
		echo -n "$(bold Extracting Splunk tar................)"
		RESULT="$(tar mxzf "${args[source]}" -C "${args[--location]}" 2>&1 > /dev/null)" || red 'FAILED'
		[[ $? != 0 ]] && ! [[ -z "${args[--debug]}" ]] && magenta_bold "${RESULT}" && exit 1
		green 'OK'
	}

	is_installed() {
		if [[ -d "${args[--location]}/splunkforwarder" ]]; then
			echo "A Splunk Universal Forwarder is already located at ${args[--location]}"
			is_yes_or_no 'Do you want to delete it first. The rest of the configuration will still occur if not (y/n) '
			if [[ "${A}" == 'y' ]]; then
				pkill -f "splunkd|${args[--location]}/splunkforwarder/"
				rm -fr "${args[--location]}/splunkforwarder" || red "Failed to remove ${args[--location]}/splunkforwarder"
				extract_splunk
			fi
		else
			extract_splunk
		fi
	}

	gen_creds() {
		echo
		bold 'Creating username and password'
		if [ -z "${args[--no-prompt]}" ]; then
			read -r -p 'Username (admin): ' USERNAME
			read -r -s -p 'Password (changeme): ' PASSWD
		fi

		if [ -z "${USERNAME}" ]; then
			USERNAME="admin"
		fi

		if [ -z "${PASSWD}" ]; then
			PASSWD="changeme"
		fi

		cat <<- EOF > "${args[--location]}/splunkforwarder/etc/system/local/user-seed.conf"
		[user_info]
		USERNAME = ${USERNAME}
		PASSWORD = ${PASSWD}
		EOF

		echo
	}

	install_uf() {
		chown -R 0:0 "${args[--location]}/splunkforwarder"
		! [[ "${args[--exclude]}" =~ deploy-poll ]] && "${SPLUNK_BIN}" set deploy-poll ${IP}:8089 --accept-license --no-prompt
		! [[ "${args[--exclude]}" =~ forward ]] && "${SPLUNK_BIN}" add forward-server "${IP}":9997 --accept-license --no-prompt
		"${SPLUNK_BIN}" enable boot-start --accept-license --no-prompt
		[[ -z "${args[--no-start]}" ]] && "${SPLUNK_BIN}" start
	}

	# Remove trailing '/' character from location
	args[--location]="${args[--location]%/}"
	SPLUNK_BIN="${args[--location]}/splunkforwarder/bin/splunk"

	# Installation
	root_check
	verify_uf
	get_ip	# Sets IP variable
	is_installed
	gen_creds
	install_uf
}

version_command() {
	echo "$version"
}

uf_setup_usage() {
	if [[ -n $long_usage ]]; then
		printf "uf-setup - Setup Splunk Universal Forwarder\n"
		echo

	else
		printf "uf-setup - Setup Splunk Universal Forwarder\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  uf-setup SOURCE [OPTIONS]\n"
	printf "  uf-setup --help | -h\n"
	printf "  uf-setup --version | -v\n"
	echo

	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		printf "  %s\n" "--location, -L LOCATION"
		printf "    Path to install Universal Forwarder\n"
		printf "    Default: /opt\n"
		echo

		printf "  %s\n" "--exclude, -e EXCLUDE (repeatable)"
		printf "    Exclude installation steps\n"
		printf "    Allowed: deploy-poll, forward\n"
		echo

		printf "  %s\n" "--no-prompt"
		printf "    Do not prompt for a password, use the default Splunk password instead\n"
		echo

		printf "  %s\n" "--no-start"
		printf "    Do not start the splunkd process\n"
		echo

		printf "  %s\n" "--debug"
		printf "    Enable debugging\n"
		echo

		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo
		printf "  %s\n" "--version, -v"
		printf "    Show version number\n"
		echo

		printf "%s\n" "Arguments:"

		printf "  %s\n" "SOURCE"
		printf "    Path to Universal Forwarder .tgz file\n"
		echo

	fi
}

normalize_input() {
	local arg flags

	while [[ $# -gt 0 ]]; do
		arg="$1"
		if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
			flags="${BASH_REMATCH[1]}"
			for ((i = 0; i < ${#flags}; i++)); do
				input+=("-${flags:i:1}")
			done
		else
			input+=("$arg")
		fi

		shift
	done
}

inspect_args() {
	if ((${#args[@]})); then
		readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
		echo args:
		for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
	else
		echo args: none
	fi

	if ((${#other_args[@]})); then
		echo
		echo other_args:
		echo "- \${other_args[*]} = ${other_args[*]}"
		for i in "${!other_args[@]}"; do
			echo "- \${other_args[$i]} = ${other_args[$i]}"
		done
	fi

	if ((${#deps[@]})); then
		readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
		echo
		echo deps:
		for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
	fi

}

print_in_color() {
	local color="$1"
	shift
	if [[ -z ${NO_COLOR+x} ]]; then
		printf "$color%b\e[0m\n" "$*"
	else
		printf "%b\n" "$*"
	fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

validate_dir_exists() {
	[[ -d "$1" ]] || echo "must be an existing directory"
}

validate_file_exists() {
	[[ -f "$1" ]] || echo "must be an existing file"
}

validate_integer() {
	[[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"

}

validate_is_uf() {
	echo "$(validate_file_exists "${1}")"
	[[ "${1}" == *.tgz ]] || echo 'Must be a .tgz file'
}

validate_not_empty() {
	[[ -z "$1" ]] && echo "must not be empty"
}

parse_requirements() {

	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--version | -v)
				version_command
				exit
				;;

			--help | -h)
				long_usage=yes
				uf_setup_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	if command -v tar >/dev/null 2>&1; then
		deps['tar']="$(command -v tar | head -n1)"
	else
		printf "missing dependency: tar\n" >&2
		printf "%s\n" "tar must be installed" >&2
		exit 1
	fi

	if command -v pkill >/dev/null 2>&1; then
		deps['pkill']="$(command -v pkill | head -n1)"
	else
		printf "missing dependency: pkill\n" >&2
		printf "%s\n" "pkill must be installed" >&2
		exit 1
	fi

	if command -v head >/dev/null 2>&1; then
		deps['head']="$(command -v head | head -n1)"
	else
		printf "missing dependency: head\n" >&2
		printf "%s\n" "head must be installed" >&2
		exit 1
	fi

	if command -v cut >/dev/null 2>&1; then
		deps['cut']="$(command -v cut | head -n1)"
	else
		printf "missing dependency: cut\n" >&2
		printf "%s\n" "cut must be installed" >&2
		exit 1
	fi

	if command -v ping >/dev/null 2>&1; then
		deps['ping']="$(command -v ping | head -n1)"
	else
		printf "missing dependency: ping\n" >&2
		printf "%s\n" "ping must be installed" >&2
		exit 1
	fi

	action="root"

	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			--location | -L)

				if [[ -n ${2+x} ]]; then

					if [[ -n $(validate_dir_exists "$2") ]]; then
						printf "validation error in %s:\n%s\n" "--location, -L LOCATION" "$(validate_dir_exists "$2")" >&2
						exit 1
					fi

					args['--location']="$2"
					shift
					shift
				else
					printf "%s\n" "--location requires an argument: --location, -L LOCATION" >&2
					exit 1
				fi
				;;

			--exclude | -e)

				if [[ -n ${2+x} ]]; then

					if [[ -z ${args['--exclude']+x} ]]; then
						args['--exclude']="\"$2\""
					else
						args['--exclude']="${args[--exclude]} \"$2\""
					fi
					shift
					shift
				else
					printf "%s\n" "--exclude requires an argument: --exclude, -e EXCLUDE" >&2
					exit 1
				fi
				;;

			--no-prompt)

				args['--no-prompt']=1
				shift
				;;

			--no-start)

				args['--no-start']=1
				shift
				;;

			--debug)

				args['--debug']=1
				shift
				;;

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)

				if [[ -z ${args['source']+x} ]]; then

					if [[ -n $(validate_is_uf "$1") ]]; then
						printf "validation error in %s:\n%s\n" "SOURCE" "$(validate_is_uf "$1")" >&2
						exit 1
					fi

					args['source']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	if [[ -z ${args['source']+x} ]]; then
		printf "missing required argument: SOURCE\nusage: uf-setup SOURCE [OPTIONS]\n" >&2
		exit 1
	fi

	[[ -n ${args['--location']:-} ]] || args['--location']="/opt"

	eval "input_array=(${args[--exclude]})"
	for i in "${input_array[@]}"; do
		if [[ ! $i =~ ^(deploy-poll|forward)$ ]]; then
			printf "%s\n" "--exclude must be one of: deploy-poll, forward" >&2
			exit 1
		fi
	done

}

initialize() {
	version="0.1.0"
	long_usage=''

	IP_REGEX='^([0-9]{1,3}\.){3}[0-9]{1,3}$'
	IPS=(
		'192.168.0.1'
		'10.0.0.1'
		'172.16.0.1'
		'127.0.0.1'
		'8.8.8.8'
	)
}

run() {
	declare -A args=()
	declare -A deps=()
	declare -a other_args=()
	declare -a input=()
	normalize_input "$@"
	parse_requirements "${input[@]}"

	case "$action" in
		"root") root_command ;;
	esac
}

initialize
run "$@"
